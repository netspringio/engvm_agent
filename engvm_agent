#! /usr/bin/python

import argparse
import os
import sqlite3
import subprocess
import sys
import time

def parseKeepAlive(str, force):
  if str == '':
    return -1
  value = -1
  try:
    value = long(str[:-1])
  except:
    sys.stderr.write('Invalid keep-alive value %s\n' % str)
    sys.exit(100)
  unit = str[-1]
  if unit == 'm':
    value = value * 60
  elif unit == 'h':
    value = value * 60 * 60
  elif unit == 'd':
    value = value * 24 * 60 * 60
  else:
    sys.stderr.write('Invalid keep-alive value %s\n' % str)
    sys.exit(100)
  if value < 0:
    sys.stderr.write('Negative keep-alive value not supported\n')
    sys.exit(100)
  if not force and value > 7 * 24 * 60 * 60:
    sys.stderr.write('Keep-alive value > 7d not supported\n')
    sys.exit(100)
  return long(time.time() + value)

def numSshClients():
  return long(
      subprocess.check_output('ss | grep -i ssh | grep ESTAB | wc -l',
      shell=True).rstrip())

def uptime():
  return long(float(open('/proc/uptime').read().split(' ')[0]))

# The schemaSql needs to be idempotent since it is executed on every
# invocation of this command.
schemaSql = '''
  create table if not exists cron (timestamp integer, num_users integer);
  create table if not exists keep_alive (
      id integer,
      until integer,
      unique(id)
  );
  insert or ignore into keep_alive values (1, -1);
'''

def getDb():
  dbFile = '/tmp/engvm_cron.sqlite'
  # Create the file if it does not already exist and make it readable and
  # writable by all.
  if not os.path.exists(dbFile):
    subprocess.check_call('sudo touch %s' % dbFile, shell = True)
    subprocess.check_call('sudo chmod 666 %s' % dbFile, shell = True)
  conn = sqlite3.connect(dbFile)
  conn.executescript(schemaSql)
  conn.commit()
  return conn

# This function initiates machine shutdown if both the following conditions
# are true:
#   - 2 hours have passed since the last time a users ssh-ed into the engvm
#   - current time is greater than user requested keep-alive limit
# NOTE: runCron always runs as root
def runCron():
  conn = getDb()

  # Determine the present state of the system
  now = long(time.time())
  numClients = numSshClients()
  keepAliveLimit = conn.execute(
      'select until from keep_alive').fetchall()[0][0]
  print 'timestamp=%d numClients=%d keepAliveLimit=%d' % (
      now, numClients, keepAliveLimit)

  # First record the current state into the db.
  conn.execute('insert into cron values (%d, %d)' % (now, numClients))
  conn.commit()

  # Determine time since last user
  rows = conn.execute(
      'select max(timestamp) from cron where num_users > 0').fetchall()
  # Interestingly this query returns a single row with None when there
  # should really be no rows. We handle all three cases.
  if len(rows) == 0 or rows[0][0] == None:
    timeSinceLastUser = uptime()
  else:
    timeSinceLastUser = now - long(rows[0][0])

  print 'timeSinceLastUser=%d' % timeSinceLastUser
  if timeSinceLastUser > 2 * 60 * 60 and keepAliveLimit < now:
    subprocess.check_call(['sudo', 'shutdown'])
  conn.close()

# Updates the keep alive limit in the db
def runKeepAlive(keepAlive):
  conn = getDb()
  conn.execute('update keep_alive set until = %d' % keepAlive)
  conn.commit()
  conn.close()

def argParser():
  parser = argparse.ArgumentParser(
    prog = 'engvm_agent',
    description = 'An agent that periodically runs on every engvm')
  parser.add_argument(
    '--cron', dest = 'cron', action = 'store_true',
    help = 'Executes engvm_agent in cron mode (not for direct use)')
  parser.set_defaults(cron = False)
  parser.add_argument(
    '--keep-alive', dest = 'keepAlive', action = 'store',
    help = 'Disables engvm auto-shutdown for a specified amount of ' +
           'time. Example: 2h/60m/3d => 2 hours/100 mins/3 days ' +
           'respectively')
  parser.set_defaults(keepAlive = '')
  parser.add_argument(
    '--force', dest = 'force', action = 'store_true',
    help = 'Enables unlimited keep alive')
  parser.set_defaults(force = False)
  return parser
  
def main(argv):
  parser = argParser()
  args = parser.parse_args(args = argv)
  keepAlive = parseKeepAlive(args.keepAlive, args.force)
  if args.cron:
    runCron()
  elif keepAlive >= 0:
    runKeepAlive(keepAlive)
  else:
    sys.stderr.write('Specify one of --cron or --keep-alive\n')
    parser.print_help(sys.stderr)
    sys.exit(100)

if __name__ == '__main__':
  main(sys.argv[1:])
